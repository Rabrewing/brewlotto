// @/pages/api/suggest-fix.js
// @summary: Suggests code fixes using Brew AI assistant based on file content
// @timestamp: 2025-07-03T21:58 EDT

import fs from 'fs';
import path from 'path';
import { analyzeEntropy } from '@/lib/audit/entropyTools'; // optional helper

export default async function handler(req, res) {
    const { path: filePath, code: overrideCode } = req.body;

    if (!filePath) {
        return res.status(400).json({ error: 'Missing file path' });
    }

    try {
        const fullPath = path.join(process.cwd(), 'public', filePath);
        const rawCode = overrideCode || fs.readFileSync(fullPath, 'utf-8');

        // (Optional) Perform pre-analysis
        const entropyReport = analyzeEntropy?.(rawCode);

        // ðŸ‘‡ Brew AI fix prompt (abstracted here)
        const response = await fetch('https://api.openai.com/v1/chat/completions', {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                model: 'gpt-4',
                messages: [
                    {
                        role: 'system',
                        content: 'You are Brew Da AI, a helpful assistant focused on clean, readable, and resilient JavaScript.'
                    },
                    {
                        role: 'user',
                        content: `Here is some JS code from a file called ${filePath}. Suggest a patch with brief reasoning. Only suggest changes if they're meaningful.\n\n${rawCode}`
                    }
                ]
            })
        });

        const { choices } = await response.json();
        const aiReply = choices?.[0]?.message?.content || '';

        res.status(200).json({
            suggestion: aiReply,
            reason: 'Generated by Brew AI assistant',
            entropy: entropyReport || null
        });
    } catch (err) {
        console.error('[suggest-fix]', err);
        res.status(500).json({ error: 'Unable to analyze file' });
    }
}